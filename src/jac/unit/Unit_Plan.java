/*
 * JAC Copyright (C) 2014 Gregory Jordan
 *
 * This file is part of JAC.   
 * 
 * JAC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jac.unit;

import java.util.List;

/**
 *
 * @author Gregory Jordan
 */
public class Unit_Plan {

    private final Integer costoverride;  // So ruleset designer can specify a certain combination of parts to be allot cheaper. 

    private boolean prototyped = false;
    private final String name;
    private final String frame;
    private final List<String> parts;

    private Unit_Plan(Builder build) {
        this.prototyped = build.prototyped;
        this.costoverride = build.costoverride;
        this.frame = build.framekey;
        this.parts = build.parts;
        this.name = build.name;

    }

    public Integer getCostoverride() {
        return costoverride;
    }

    public boolean isPrototyped() {
        return prototyped;
    }

    public String getName() {
        return name;
    }

    public String getFrame() {
        return frame;
    }

    public List<String> getParts() {
        return parts;
    }

    //----------------------------------------------------------------------
    public static class Builder {

        String framekey;
        List<String> parts;
        private final String name;
        private boolean prototyped;

        //Overrides.
        private Integer costoverride = null;  // So that

        public Builder(String name, String frame, List<String> parts) {
            this.framekey = frame;
            this.parts = parts;
            this.name = name;
            prototyped = false;
        }

        public Builder prototyped(boolean value) {
            prototyped = value;
            return this;
        }

        /**
         * Overrides the autogenerated costvalue.
         *
         * @param value
         * @return
         */
        public Builder costOverride(Integer value) {
            costoverride = value;
            return this;
        }

        public Unit_Plan build() {
            return new Unit_Plan(this);
        }

    }

}
